#version 330

in vec3 viewedVertex;
in vec3 fragNormal;
in vec3 passColor;
in vec3 lightViewedVertex;

out vec4 fragColor;

uniform vec3 lightDir;
uniform sampler2D shadowMap;

float light(){

	//Higher for sharper highlights
	float power = 2.0;
	if(lightDir.y == 1) return 0;
	return pow(max(dot(normalize(fragNormal), lightDir), 0.0), power);
}

float shadow(){

	//Bias for shadow acne
	float bias = -.005*log(clamp(dot(fragNormal, lightDir),0,1));
	
	
	//For smoothing out the edges. Change blurSide to adjust.
	int blurRad = 2;

	vec2 inc = 1.0 / textureSize(shadowMap, 0);
	float shadowFactor = 0.0;

    //Transform from screen coordinates to texture coordinates
    vec3 coords = lightViewedVertex * 0.5 + 0.5;
    
    for(int row = -blurRad; row <= blurRad; row++){
    	for(int col = -blurRad; col <= blurRad; col++){
    		float d = texture(shadowMap, coords.xy + vec2(row, col) * inc).r;
    		shadowFactor += (coords.z - bias) < d ? 0.0 : 1.0;
    	}
    }
    
    //Higher values are more shadowed
    return shadowFactor / pow(float(blurRad * 2 + 1), 2.0);
}

float fog(){

	//Controls rate of fog thickening. Higher for quicker
	float base = 1.02;
	
	//Distance fog starts
	float dist = 50.0;
	
	return clamp(pow(base, length(viewedVertex) - dist) - 1, 0.0, 1.0);
}

void main()
{
	float shadowFactor = shadow();
	float lightFactor = (1.0 - shadowFactor) * light();
	float fogFactor = fog();
	vec3 fog = vec3(0.5, 0.7, 1.0);
	vec3 base = passColor;
	vec3 ambient = vec3(0.2, 0.2, 0.2);
	
	//Live lighting model
	fragColor = vec4(fog * fogFactor + clamp(((lightFactor + ambient) * base), 0.0, 1.0) * (1.0 - fogFactor), 1.0);
	
	//Test normals
	//fragColor = vec4(abs(normalize(fragNormal)), 1.0);
	
	//Test colors
	//fragColor = vec4(base, 1.0);
}